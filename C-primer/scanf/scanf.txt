//scanf读取%d
使用一个%d来读取一个整数。scanf（）函数开始每次读取一个输入字符，它跳过空白字符（空格、制表符和换行符）直到遇到一个非空白字符。
因为它试图读取一个整数，所以scanf（）期望发现一个数字字符或者一个符号（+或者一）。
如果它发现了一个数字或一个符号，那么它就保存之并读取下一个字符；如果接下来的字符是一个数字，它保存这个数字，并读取下一个字符。
就这样，scanf（）持续读取和保存字符直到它遇到一个非数字的字符。如果遇到了一个非数字的字符，它就得出结论：已读到了整数的尾部。
scanf（）把这个非数字字符放回输入。这就意味着当程序下一次开始读取输入时，它将从前面被放弃的那个非数字字符开始。
最后，scanf（）计算它读取到的数字的相应数值，并将该值放到指定的变量中。
如果您使用了字段宽度，那么scanf（）在字段结尾或者在第一个空白字符处（二者中最先到达的一个）终止。
如果第一个非空白字符不是数字，将会发生什么呢？
比如说，是A而非一个数字？这时scanf（）会停在那里，并把A（或者不管是什么）放回输入。
没有把任何值赋给指定的变量，程序下一次读取输入时，它就在A处重新开始。
如果程序中只有%d说明符，scanf（）永远也不会越过那个A（去读下一个）。
且，如果您使用带有多个说明符的scanf（）语句，ANSIC要求函数在第一个出错的地方停止读取输入。// scanf 读取%d
//scanf读取%s
如果使用%s说明符，那么空白字符以外的所有字符都是可接受的，
所以scanf（）跳过空白字符直到遇到第一个非空白字符，
然后保存再次遇到空白字符之前的所有非空白字符。这就意味着%s使scanf（）读取一个单词，
也就是说，一个不包含空白字符的字符串。
如果使用字段宽度，scanf（）在字段的结尾或者第一个空白字符处停止。
不能通过字段宽度使得scanf（）用一个%s说明符读取多于一个字的输入。
最后一点：
当scanf（）把字符串放在一个指定的数组中时，它添加终止的'\0'使得数组内容成为一个C字符串。//scanf读取%s
//scanf读取%c
如果使用%c说明符，那么所有的输入字符都是平等的。
如果下一个输入字符是一个空格或者换行符，将会把这个空格或换行符赋给指定的变量；
不会跳过空白字符。

格式字符申中的空格意味着跳过下一个输入项之前的任何空格。例如下面的语句：
scanf（"%d，8d"，&n，&m）；
将会接受下列任何一个输入行：
88，121
88 ，121
88，  121
请注意，“任何空格”的概念包括没有空格的特殊情况。
除了%c以外的说明符会自动跳过输入项之前的空格，
所以scanf（"%d%d"，&n，&m）与scanf（"%d%d”，&n，&m）的行为是相同的。
对于%c来说，向格式字符串中添加一个空格将导致一些区别。
例如，如果在格式字符串中%c之前有一个空格，那么scanf（）会跳到第一个非空白字符处。
也就是说，命令scanf（“%c”，&ch）读取在输入中遇到的第一个字符，
而scanf（"%c"，&ch）则读取遇到的第一个非空白字符。

